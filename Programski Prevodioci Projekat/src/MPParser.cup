//import section

import java_cup.runtime.*;
import java.io.*;

parser code {:
   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
	  }
	  catch( Exception e )
	  {
		   System.out.println(e);
	  }
   }
:};


//Terminal symbols
terminal ASSIGN, LEFTPAR, RIGHTPAR, LEFTCURLY, RIGHTCURLY, DOTDOT, SEMI, COMMA;
terminal MAIN, ID, INT, CHAR, REAL, BOOL, DO, WHILE, READ, WRITE, CONST;
terminal MUL, AND, OR, DIV, PLUS, MINUS, LESSTHAN, LESSEQUAL, EQUALS, NOTEQUAL, MORETHAN, MOREEQUAL;

//Nonterminal symbols
non terminal Program, Block, VarList, StatementList, VarDecl, NameList, Type;
non terminal Statement, Expression, AndExpression, RelExpression, ArExpression, RelOp;
non terminal Term, Factor;




//Grammar

Program ::= MAIN LEFTPAR RIGHTPAR Block
            {:
               System.out.println( "Redukcija po smeni 1." );
            :};

Block ::= LEFTCURLY VarList StatementList RIGHTCURLY
             {:
                System.out.println( "Redukcija po smeni 2." );
             :};

VarList ::= VarList VarDecl
            {:
               System.out.println( "Redukcija po smeni 3." );
            :}
          | VarDecl
            {:
               System.out.println( "Redukcija po smeni 4." );
            :}
          ;

VarDecl ::= NameList DOTDOT Type SEMI
                {:
                   System.out.println( "Redukcija po smeni 5." );
                :};

NameList ::= NameList COMMA ID
             {:
                System.out.println( "Redukcija po smeni 6." );
             :} 
           | ID
             {:
                System.out.println( "Redukcija po smeni 7." );
             :}
           ;

Type ::= INT
        {:
           System.out.println( "Redukcija po smeni 8." );
        :}
      | CHAR
        {:
           System.out.println( "Redukcija po smeni 9." );
        :}
      | REAL
        {:
           System.out.println( "Redukcija po smeni 10." );
        :}
      | BOOL
        {:
           System.out.println( "Redukcija po smeni 11." );
        :}
      ;

StatementList ::= StatementList Statement
             {:
                System.out.println( "Redukcija po smeni 12." );
             :}
             | Statement
             {:
                System.out.println( "Redukcija po smeni 13.");
             :}
         ;

Statement ::= DO Statement WHILE Expression
           {:
              System.out.println( "Redukcija po smeni 14." );
           :}
         | ID ASSIGN Expression SEMI
           {:
              System.out.println( "Redukcija po smeni 15." );
           :}
         | READ LEFTPAR ID RIGHTPAR SEMI
            {:
              System.out.println( "Redukcija po smeni 16." );
            :}
         | WRITE LEFTPAR Expression RIGHTPAR SEMI
            {:
              System.out.println( "Redukcija po smeni 17." );
            :}
         | Block
            {:
              System.out.println( "Redukcija po smeni 18." );
            :}
         ;

Expression ::= Expression OR AndExpression
            {:
               System.out.println( "Redukcija po smeni 19." );
            :}
          | AndExpression
            {:
               System.out.println( "Redukcija po smeni 20." );
            :}
          ;

AndExpression ::= AndExpression AND RelExpression
         {:
            System.out.println( "Redukcija po smeni 21." );
         :}
         | RelExpression
          {:
            System.out.println( "Redukcija po smeni 22." );
          :}
         ;

RelExpression ::= ArExpression RelOp ArExpression
          {:
             System.out.println( "Redukcija po smeni 23." );
          :}
          | ArExpression
            {:
             System.out.println( "Redukcija po smeni 24." );
            :}
          ;

RelOp ::= LESSTHAN
           {:
              System.out.println( "Redukcija po smeni 25." );
           :}
           | LESSEQUAL
               {:
                  System.out.println( "Redukcija po smeni 26." );
               :}
           | EQUALS
               {:
                  System.out.println( "Redukcija po smeni 27." );
               :}
           | NOTEQUAL
               {:
                  System.out.println( "Redukcija po smeni 28." );
               :}
          | MORETHAN
               {:
                  System.out.println( "Redukcija po smeni 29." );
               :}
          | MOREEQUAL
               {:
                 System.out.println( "Redukcija po smeni 30." );
               :}
           ;

ArExpression ::= ArExpression PLUS Term
          {:
             System.out.println( "Redukcija po smeni 31." );
          :}
        | ArExpression MINUS Term
          {:
             System.out.println( "Redukcija po smeni 32." );
          :}
        | Term
           {:
             System.out.println( "Redukcija po smeni 33." );
           :}
        ;

Term ::= Term MUL Factor
           {:
              System.out.println( "Redukcija po smeni 34." );
           :}
         | Term DIV Factor
           {:
              System.out.println( "Redukcija po smeni 35." );
           :}
         | Factor
           {:
             System.out.println( "Redukcija po smeni 36." );
            :}
         ;

Factor ::= ID
           {:
              System.out.println( "Redukcija po smeni 37." );
           :}
         | CONST
           {:
              System.out.println( "Redukcija po smeni 38." );
           :}
         | LEFTPAR Expression RIGHTPAR
           {:
              System.out.println( "Redukcija po smeni 39." );
           :}
         ;



	





